# -*- coding: utf-8 -*-

SERVER_PORT=5064

CA_VERSION=12

DBE_VALUE   =1
DBE_ARCHIVE =2
DBE_LOG     =DBE_ARCHIVE
DBE_ALARM   =4
DBE_PROPERTY=8

# metadata classes
DBR_PLAIN=0
DBR_STS=1
DBR_TIME=2
DBR_GR=3
DBR_CTRL=4

# DBF and DBR types from db_access.h

DBF_STRING =0
DBF_INT    =1
DBF_SHORT  =1
DBF_FLOAT  =2
DBF_ENUM   =3
DBF_CHAR   =4
DBF_LONG   =5
DBF_DOUBLE =6

elementsize={DBF_STRING:40,
             DBF_INT:2,
             DBF_SHORT:2,
             DBF_FLOAT:4,
             DBF_ENUM:2,
             DBF_CHAR:1,
             DBF_LONG:4,
             DBF_DOUBLE:8
            }
def dbf_elem_size(dbf):
    return elementsize[dbf]

DBR_STRING =DBF_STRING
DBR_INT    =DBF_INT
DBR_SHORT  =DBF_INT
DBR_FLOAT  =DBF_FLOAT
DBR_ENUM   =DBF_ENUM
DBR_CHAR   =DBF_CHAR
DBR_LONG   =DBF_LONG
DBR_DOUBLE =DBF_DOUBLE
DBR_STS_STRING =7
DBR_STS_SHORT  =8
DBR_STS_INT=DBR_STS_SHORT
DBR_STS_FLOAT  =9
DBR_STS_ENUM   =10
DBR_STS_CHAR   =11
DBR_STS_LONG   =12
DBR_STS_DOUBLE =13
DBR_TIME_STRING=14
DBR_TIME_INT   =15
DBR_TIME_SHORT =15
DBR_TIME_FLOAT =16
DBR_TIME_ENUM  =17
DBR_TIME_CHAR  =18
DBR_TIME_LONG  =19
DBR_TIME_DOUBLE=20
DBR_GR_STRING  =21
DBR_GR_SHORT   =22
DBR_GR_INT =DBR_GR_SHORT
DBR_GR_FLOAT   =23
DBR_GR_ENUM=24
DBR_GR_CHAR=25
DBR_GR_LONG=26
DBR_GR_DOUBLE  =27
DBR_CTRL_STRING=28
DBR_CTRL_SHORT =29
DBR_CTRL_INT   =DBR_CTRL_SHORT
DBR_CTRL_FLOAT =30
DBR_CTRL_ENUM  =31
DBR_CTRL_CHAR  =32
DBR_CTRL_LONG  =33
DBR_CTRL_DOUBLE=34
DBR_PUT_ACKT   =DBR_CTRL_DOUBLE + 1
DBR_PUT_ACKS   =DBR_PUT_ACKT + 1
DBR_STSACK_STRING=DBR_PUT_ACKS + 1
DBR_CLASS_NAME=DBR_STSACK_STRING + 1

DBR2DBF={
    DBR_STRING:(DBF_STRING,DBR_PLAIN),
    DBR_INT   :(DBF_INT,   DBR_PLAIN),
    DBR_SHORT :(DBF_INT,   DBR_PLAIN),
    DBR_FLOAT :(DBF_FLOAT, DBR_PLAIN),
    DBR_ENUM  :(DBF_ENUM,  DBR_PLAIN),
    DBR_CHAR  :(DBF_CHAR,  DBR_PLAIN),
    DBR_LONG  :(DBF_LONG,  DBR_PLAIN),
    DBR_DOUBLE:(DBF_DOUBLE,DBR_PLAIN),
    DBR_STS_STRING:(DBF_STRING,DBR_STS),
    DBR_STS_SHORT :(DBF_SHORT, DBR_STS),
    DBR_STS_INT   :(DBF_INT,   DBR_STS),
    DBR_STS_FLOAT :(DBF_FLOAT, DBR_STS),
    DBR_STS_ENUM  :(DBF_ENUM,  DBR_STS),
    DBR_STS_CHAR  :(DBF_CHAR,  DBR_STS),
    DBR_STS_LONG  :(DBF_LONG,  DBR_STS),
    DBR_STS_DOUBLE:(DBF_DOUBLE,DBR_STS),
    DBR_TIME_STRING:(DBF_STRING,DBR_TIME),
    DBR_TIME_INT  :(DBF_INT,    DBR_TIME),
    DBR_TIME_SHORT:(DBF_SHORT,  DBR_TIME),
    DBR_TIME_FLOAT:(DBF_FLOAT,  DBR_TIME),
    DBR_TIME_ENUM :(DBF_ENUM,   DBR_TIME),
    DBR_TIME_CHAR :(DBF_CHAR,   DBR_TIME),
    DBR_TIME_LONG :(DBF_LONG,   DBR_TIME),
    DBR_TIME_DOUBLE:(DBF_DOUBLE,DBR_TIME),
    DBR_GR_STRING :(DBF_STRING, DBR_STS),
    DBR_GR_SHORT  :(DBF_SHORT, DBR_GR),
    DBR_GR_INT :(DBF_INT,      DBR_GR),
    DBR_GR_FLOAT  :(DBF_FLOAT, DBR_GR),
    DBR_GR_ENUM:(DBF_ENUM,     DBR_GR),
    DBR_GR_CHAR:(DBF_CHAR,     DBR_GR),
    DBR_GR_LONG:(DBF_LONG,     DBR_GR),
    DBR_GR_DOUBLE :(DBF_DOUBLE,DBR_GR),
    DBR_CTRL_STRING:(DBF_STRING, DBR_STS),
    DBR_CTRL_SHORT:(DBF_SHORT,  DBR_CTRL),
    DBR_CTRL_INT  :(DBF_INT,    DBR_CTRL),
    DBR_CTRL_FLOAT:(DBF_FLOAT,  DBR_CTRL),
    DBR_CTRL_ENUM :(DBF_ENUM,   DBR_CTRL),
    DBR_CTRL_CHAR :(DBF_CHAR,   DBR_CTRL),
    DBR_CTRL_LONG :(DBF_LONG,   DBR_CTRL),
    DBR_CTRL_DOUBLE:(DBF_DOUBLE,DBR_CTRL),
    DBR_PUT_ACKT  :(DBF_SHORT,DBR_PLAIN),
    DBR_PUT_ACKS  :(DBF_SHORT,DBR_PLAIN),
    DBR_STSACK_STRING:(DBR_STSACK_STRING,None),
    DBR_CLASS_NAME:(DBF_STRING,DBR_PLAIN),
}
def dbr_to_dbf(dbr):
    return DBR2DBF[dbr]

# compute reverse mapping
DBF2DBR={}
for k,v in DBR2DBF.iteritems():
    if v[0] is None:
        continue
    DBF2DBR[v]=k
def dbf_to_dbr(dbf):
    return DBF2DBR[dbf]
